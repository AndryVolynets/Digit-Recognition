geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 1), vjust = -0.5)
CO2$Index <- seq_len(nrow(CO2))
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 1), vjust = -0.5)
CO2$Index <- as.character(seq_len(nrow(CO2)))
CO2$Index <- make.unique(CO2$Index)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 1), vjust = -0.5)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2")
CO2$Index <- as.character(seq_len(nrow(CO2)))
CO2$Index <- make.unique(CO2$Index)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2")
geom_text(aes(label = uptake), position = position_dodge(width = 1), vjust = -0.5)
CO2$Index <- as.character(seq_len(nrow(CO2)))
CO2$Index <- make.unique(CO2$Index)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 10), vjust = -0.5)
CO2$Index <- as.character(seq_len(nrow(CO2)))
CO2$Index <- make.unique(CO2$Index)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 100), vjust = -0.5)
CO2$Index <- as.character(seq_len(nrow(CO2)))
CO2$Index <- make.unique(CO2$Index)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = -10), vjust = -0.5)
CO2$Index <- as.character(seq_len(nrow(CO2)))
CO2$Index <- make.unique(CO2$Index)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = -100), vjust = -0.5)
CO2$Index <- as.character(seq_len(nrow(CO2)))
CO2$Index <- make.unique(CO2$Index)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 0), vjust = -0.5)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = make.unique(CO2$Index)), position = position_dodge(width = 0), vjust = -0.5)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = unique(CO2$Index)), position = position_dodge(width = 0), vjust = -0.5)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 1), vjust = -0.5)
CO2$Index <- seq_len(nrow(CO2))
CO2$Index <- seq_len(nrow(CO2)) + runif(nrow(CO2), -0.1, 0.1)
CO2$Index <- seq_len(nrow(CO2)) + runif(nrow(CO2), -0.1, 0.1)
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 1), vjust = -0.5)
CO2$Index <- seq_len(nrow(CO2))
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(position = position_dodge(width = 1), vjust = -0.5)
CO2$Index <- seq_len(nrow(CO2))
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(position = position_dodge(width = 1), vjust = -0.5)
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point()
ggplot(penguins, aes(x = "", fill = species)) +
geom_bar(width = 1) +
coord_polar(theta = "y")
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point() +
ggplot(penguins,
aes(x = body_mass_g,
y = flipper_length_mm,
color = species)
) +
geom_point()
# Лінійний графік співвідношення маси тіла до розміру ласт, розбитих на види:
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Кругова діаграма кількості пінгвінів по різним видам:
ggplot(penguins, aes(x = "", fill = species)) +
geom_bar(width = 1) +
coord_polar(theta = "y")
# Точкова діаграма співвідношення маси тіла до розміру ласт, розбитих на види:
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point() +
# Лінійний графік співвідношення маси тіла до розміру ласт, розбитих на види:
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
head(penguins)
ggplot(penguins, aes(x = "", fill = species)) +
geom_bar(width = 1) +
coord_polar(theta = "y")
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point()
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Візуалізація співвідношення маси тіла до об’єму дзьоба:
ggplot(penguins, aes(x = body_mass_g, y = bill_depth_mm)) +
geom_point()
penguins$bill_volume_mm3 <- penguins$bill_length_mm * penguins$bill_depth_mm * penguins$head_length_mm
# Точкова діаграма залежності об’єму дзьоба від маси тіла:
ggplot(penguins, aes(x = body_mass_g, y = bill_volume_mm3, color = species)) +
geom_point()
penguins$bill_volume_mm3 <-
penguins$bill_depth_mm * penguins$culmen_length_mm * penguins$body_mass_g
penguins$bill_volume_mm3 <-
penguins$bill_depth_mm * penguins$culmen_length_mm * penguins$body_mass_g
head(penguins)
penguins$bill_volume_mm3 <-
penguins$bill_depth_mm * penguins$flipper_length_mm * penguins$body_mass_g
head(penguins)
#точкову діаграму, в якій відобразити залежність об’єму дзьоба від маси тіла;
ggplot(penguins, aes(x = body_mass_g, y = bill_volume_mm3, color = species)) +
geom_point() +
labs(x = "Масса тіла (g)", y = "bill_volume_mm3", color = "Види") +
ggtitle("Залежність об’єму дзьоба від маси тіла")
map_data <- map_data("world")
ggplot() +
geom_polygon(data = map_data,
aes(
x = long,
y = lat,
group = group
),
fill = "white",
color = "black"
)
map_data <- map_data("world")
ggplot() +
geom_polygon(data = map_data,
aes(
x = long,
y = lat,
group = group
),
fill = "white",
color = "black"
) +
theme_void()
library(ggplot2)
library(gganimate)
library(palmerpenguins)
library(sf)
library(maps)
#head(penguins)
data(CO2)
# створення графіку залежності між параметрами
ggplot(data = CO2, aes(x = Plant, y = uptake, color = Type)) +
geom_line() +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
labs(x = "Рослини", y = "Поглинання CO2", title = "Залежність поглинання CO2 від типу рослин") +
theme_minimal()
# стовпчикова діаграма
ggplot(data = CO2, aes(x = Type, y = uptake)) +
geom_bar(stat = "identity", fill = "#69b3a2") +
labs(x = "Тип рослин", y = "Поглинання CO2", title = "Поглинання CO2 від типу рослин") +
theme_minimal()
# гістограма
ggplot(data = CO2, aes(x = uptake)) +
geom_histogram(fill = "#69b3a2", color = "black", bins = 30) +
labs(x = "Поглинання CO2", y = "Частота", title = "Розподіл поглинання CO2") +
theme_minimal()
# діаграма розмаху
ggplot(data = CO2, aes(x = Type, y = uptake, fill = Type)) +
geom_boxplot() +
scale_fill_manual(values = c("#E69F00", "#56B4E9")) +
labs(x = "Тип рослин", y = "Поглинання CO2", title = "Розподіл поглинання CO2 від типу рослин") +
theme_minimal()
# точковий графік з лінією тренда
ggplot(data = CO2, aes(x = conc, y = uptake, color = Type)) +
geom_point() +
geom_smooth(method = "lm") +
scale_color_manual(values = c("#E69F00", "#56B4E9")) +
labs(x = "Концентрація CO2", y = "Поглинання CO2", title = "Залежність поглинання CO2 від концентрації") +
theme_minimal()
# Додавання мітки
ggplot(data = CO2, aes(x = Plant, y = uptake, fill = Type)) +
geom_col(position = "dodge") +
xlab("Рослини") +
ylab("Поглинання CO2") +
geom_text(aes(label = uptake), position = position_dodge(width = 1), vjust = -1)
# Створення анімації
p <- ggplot(data = CO2, aes(x = conc, y = uptake, group = Plant)) +
geom_line() +
labs(title = "CO2 поглиннання рослинами за") +
xlab("Концентраця CO2") +
ylab("Поглинання CO2") +
transition_reveal(Index)
animate(p, nframes = 100)
# Кругова діаграма кількості пінгвінів по різним видам:
ggplot(penguins, aes(x = "", fill = species)) +
geom_bar(width = 1) +
coord_polar(theta = "y")
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point()
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm, color = species)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# Візуалізація співвідношення маси тіла до об’єму дзьоба:
ggplot(penguins, aes(x = body_mass_g, y = bill_depth_mm)) +
geom_point()
# Створення нового стовпчика з об’ємом дзьоба:
penguins$bill_volume_mm3 <-
penguins$bill_depth_mm * penguins$flipper_length_mm * penguins$body_mass_g
head(penguins)
#точкову діаграму, в якій відобразити залежність об’єму дзьоба від маси тіла;
ggplot(penguins, aes(x = body_mass_g, y = bill_volume_mm3, color = species)) +
geom_point() +
labs(x = "Масса тіла (g)", y = "bill_volume_mm3", color = "Види") +
ggtitle("Залежність об’єму дзьоба від маси тіла")
map_data <- map_data("world")
ggplot() +
geom_polygon(data = map_data,
aes(
x = long,
y = lat,
group = group
),
fill = "white",
color = "black"
) +
theme_void()
# New data
library(EBImage)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
loaded_model = load_model_hdf5('D:/RStudioLabs/TensorFlow/model/my_MNIST_model.hdf5')
library(keras)
library(EBImage)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
loaded_model = load_model_hdf5('D:/RStudioLabs/TensorFlow/model/my_MNIST_model.hdf5')
setwd("D:/RStudioLabs/TensorFlow/tests")
temp = list.files(pattern = "*.jpg")
mypic <- list()
for (i in 1:length(temp)) {
mypic[[i]] <- readImage(temp[[i]])
}
par(mfrow = c(4,4))
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp)) {
colorMode(mypic[[i]]) <- Grayscale
}
for (i in 1:length(temp)) {
mypic[[i]] <- 1-mypic[[i]]
}
for (i in 1:length(temp)) {
mypic[[i]] <- resize(mypic[[i]], 28, 28)
}
str(mypic)
par(mfrow = c(4,5))
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp)) {
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
new <- NULL
for (i in 1:length(temp)) {
new <- rbind(new, mypic[[i]])
}
newx <- new[,1:784]
# (7,5,2,0,5,3)
newy <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
# Prediction
pred <- loaded_model %>%
predict(newx) %>%
k_argmax()
pred
table(Predicted = as.vector(pred), Actual = as.vector(newy))
# New data
library(EBImage)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
loaded_model = load_model_hdf5('D:/RStudioLabs/TensorFlow/model/my_MNIST_model.hdf5')
setwd("D:/RStudioLabs/TensorFlow/tests")
temp = list.files(pattern = "*.jpg")
mypic <- list()
for (i in 1:length(temp)) {
mypic[[i]] <- readImage(temp[[i]])
}
par(mfrow = c(4,4))
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp)) {
colorMode(mypic[[i]]) <- Grayscale
}
for (i in 1:length(temp)) {
mypic[[i]] <- 1-mypic[[i]]
}
for (i in 1:length(temp)) {
mypic[[i]] <- resize(mypic[[i]], 28, 28)
}
str(mypic)
par(mfrow = c(4,5))
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp)) {
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
new <- NULL
for (i in 1:length(temp)) {
new <- rbind(new, mypic[[i]])
}
newx <- new[,1:784]
# (7,5,2,0,5,3)
newy <- c(7,5,2,0,5,3,4,3,2,7,5,6,8,5,6)
# Prediction
pred <- loaded_model %>%
predict(newx) %>%
k_argmax()
pred
table(Predicted = as.vector(pred), Actual = as.vector(newy))
library(keras)
library(EBImage)
# Load MNIST dataset
mnist <- dataset_mnist()
trainx <- mnist$train$x
trainy <- mnist$train$y
testx <- mnist$test$x
testy <- mnist$test$y
# Plot images
par(mfrow = c(3,3))
invisible(lapply(1:9, function(i) plot(as.raster(trainx[i,,], max = 255))))
par(mfrow = c(1,1))
# Select five images
a <- c(1, 12, 36, 48, 66, 101, 133, 139, 146)
par(mfrow = c(3,3))
invisible(lapply(a, function(i) plot(as.raster(trainx[i,,], max = 255))))
par(mfrow = c(1,1))
# Reshape and rescale data
trainx <- array_reshape(trainx, c(nrow(trainx), 784)) / 255
testx <- array_reshape(testx, c(nrow(testx), 784)) / 255
# One hot encoding
trainy <- to_categorical(trainy, 10)
testy <- to_categorical(testy, 10)
# Define model
model <- keras_model_sequential()
model %>%
layer_dense(units = 512, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units= 256, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
# Compile model
model %>%
compile(loss = 'categorical_crossentropy', optimizer = optimizer_rmsprop(), metrics = 'accuracy')
# Fit model
history <- model %>%
fit(trainx, trainy, epochs = 30, batch_size = 32, validation_split = 0.2)
# Evaluate and predict on test data
model %>% evaluate(testx, testy)
pred <- model %>% predict(testx) %>% k_argmax()
prob <- model %>% predict(testx)
save_model_hdf5(model, "D:/RStudioLabs/TensorFlow/model/my_MNIST_model2.0.hdf5")
# Load saved model
loaded_model <- load_model_hdf5('D:/RStudioLabs/TensorFlow/model/my_MNIST_model2.0.hdf5')
# Load new data
setwd("D:/RStudioLabs/TensorFlow/tests")
temp <- list.files(pattern = "*.jpg")
mypic <- lapply(temp, function(file) {
img <- readImage(file)
colorMode(img) <- Grayscale
img <- 1 - img
img <- resize(img, 28, 28)
img <- array_reshape(img, c(28,28,3))
})
# Predict on new data
newx <- do.call(rbind, lapply(mypic, `[`, 1:784))
newy <- c(7,5,2,0,5,3,4,3,2,7,5,6,8,5,6)
pred <- loaded_model %>% predict(newx) %>% k_argmax()
# Display results
table(Predicted = as.vector(pred), Actual = as.vector(newy))
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp)) {
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
new <- NULL
setwd("D:/RStudioLabs/TensorFlow/tests")
temp = list.files(pattern = "*.jpg")
mypic <- list()
for (i in 1:length(temp)) {
mypic[[i]] <- readImage(temp[[i]])
}
par(mfrow = c(4,4))
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp)) {
colorMode(mypic[[i]]) <- Grayscale
}
for (i in 1:length(temp)) {
mypic[[i]] <- 1-mypic[[i]]
}
for (i in 1:length(temp)) {
mypic[[i]] <- resize(mypic[[i]], 28, 28)
}
str(mypic)
par(mfrow = c(4,5))
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp)) {
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
new <- NULL
for (i in 1:length(temp)) {
new <- rbind(new, mypic[[i]])
}
newx <- new[,1:784]
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp))
plot(mypic[[i]])
for (i in 1:length(temp)) {
mypic[[i]] <- array_reshape(mypic[[i]], c(28,28,3))
}
new <- NULL
for (i in 1:length(temp)) {
new <- rbind(new, mypic[[i]])
}
newx <- new[,1:784]
# Load new data
setwd("D:/RStudioLabs/TensorFlow/tests")
temp <- list.files(pattern = "*.jpg")
mypic <- lapply(temp, function(file) {
img <- readImage(file)
colorMode(img) <- Grayscale
img <- 1 - img
img <- resize(img, 28, 28)
img <- array_reshape(img, c(28,28,3))
})
# Predict on new data
newx <- do.call(rbind, lapply(mypic, `[`, 1:784))
newy <- c(7,5,2,0,5,3,4,3,2,7,5,6,8,5,6)
pred <- loaded_model %>% predict(newx) %>% k_argmax()
# Display results
table(Predicted = as.vector(pred), Actual = as.vector(newy))
# Load saved model
loaded_model <- load_model_hdf5('D:/RStudioLabs/TensorFlow/model/my_MNIST_model.hdf5')
# Load new data
setwd("D:/RStudioLabs/TensorFlow/tests")
temp <- list.files(pattern = "*.jpg")
mypic <- lapply(temp, function(file) {
img <- readImage(file)
colorMode(img) <- Grayscale
img <- 1 - img
img <- resize(img, 28, 28)
img <- array_reshape(img, c(28,28,3))
})
# Predict on new data
newx <- do.call(rbind, lapply(mypic, `[`, 1:784))
newy <- c(7,5,2,0,5,3,4,3,2,7,5,6,8,5,6)
pred <- loaded_model %>% predict(newx) %>% k_argmax()
# Display results
table(Predicted = as.vector(pred), Actual = as.vector(newy))
table_values
table_values <- table(Predicted = as.vector(pred), Actual = as.vector(newy))
table_values
sum(diag(table_values))
(diag(table_values))
loaded_model <- load_model_hdf5('D:/RStudioLabs/TensorFlow/model/my_MNIST_model.hdf5')
View(from_config)
View(from_config)
View(`%<-active%`)
View(k_temporal_padding)
View(save_model_weights_tf)
View(r)
reticulate::repl_python()
